generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "fullTextIndex", "fullTextSearch", "prismaSchemaFolder", "omitApi"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Project {
  id                    String                 @id @default(cuid())
  name                  String
  slug                  String                 @unique
  logo                  String?
  inviteCode            String?                @unique
  plan                  String                 @default("free")
  stripeId              String?                @unique
  billingCycleStart     Int
  paymentFailedAt       DateTime?
  invoicePrefix         String?                @unique
  stripeConnectId       String?                @unique
  shopifyStoreId        String?                @unique
  totalLinks            Int                    @default(0)
  totalClicks           Int                    @default(0)
  usage                 Int                    @default(0)
  usageLimit            Int                    @default(1000)
  linksUsage            Int                    @default(0)
  linksLimit            Int                    @default(25)
  salesUsage            Int                    @default(0)
  salesLimit            Int                    @default(0)
  domainsLimit          Int                    @default(3)
  tagsLimit             Int                    @default(5)
  foldersUsage          Int                    @default(0)
  foldersLimit          Int                    @default(0)
  usersLimit            Int                    @default(1)
  aiUsage               Int                    @default(0)
  aiLimit               Int                    @default(10)
  referralLinkId        String?                @unique
  referredSignups       Int                    @default(0)
  store                 Json?
  allowedHostnames      Json?
  conversionEnabled     Boolean                @default(false)
  webhookEnabled        Boolean                @default(false)
  partnersEnabled       Boolean                @default(false)
  ssoEnabled            Boolean                @default(false)
  dotLinkClaimed        Boolean                @default(false)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  usageLastChecked      DateTime               @default(now())
  users                 ProjectUsers[]
  invites               ProjectInvite[]
  sentEmails            SentEmail[]
  links                 Link[]
  domains               Domain[]
  tags                  Tag[]
  programs              Program[]
  invoices              Invoice[]
  customers             Customer[]
  defaultDomains        DefaultDomains[]
  restrictedTokens      RestrictedToken[]
  oAuthCodes            OAuthCode[]
  integrations          Integration[]
  installedIntegrations InstalledIntegration[]
  webhooks              Webhook[]
  folders               Folder[]
  registeredDomains     RegisteredDomain[]
  dashboards            Dashboard[]
  utmTemplates          UtmTemplate[]
  yearInReviews         YearInReview[]

  @@index([usageLastChecked])
}

model ProjectInvite {
  email     String
  expires   DateTime
  projectId String
  role      Role     @default(member)
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([email, projectId])
  @@index([projectId])
}

model ProjectUsers {
  id                     String                  @id @default(cuid())
  role                   Role                    @default(member)
  userId                 String
  projectId              String
  workspacePreferences   Json?
  defaultFolderId        String?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  notificationPreference NotificationPreference?
  user                   User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project                Project                 @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@index([projectId])
}

model SentEmail {
  id        String   @id @default(cuid())
  type      String
  createdAt DateTime @default(now())
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model NotificationPreference {
  id                         String       @id @default(cuid())
  projectUserId              String       @unique
  linkUsageSummary           Boolean      @default(true)
  domainConfigurationUpdates Boolean      @default(true)
  newPartnerSale             Boolean      @default(true)
  newPartnerApplication      Boolean      @default(true)
  projectUser                ProjectUsers @relation(fields: [projectUserId], references: [id], onDelete: Cascade)
}

model Domain {
  id                      String            @id @default(cuid())
  slug                    String            @unique
  verified                Boolean           @default(false)
  placeholder             String?
  expiredUrl              String?           @db.LongText
  notFoundUrl             String?           @db.LongText
  primary                 Boolean           @default(false)
  archived                Boolean           @default(false)
  lastChecked             DateTime          @default(now())
  logo                    String?
  appleAppSiteAssociation Json?
  assetLinks              Json?
  projectId               String?
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  links                   Link[]
  project                 Project?          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  registeredDomain        RegisteredDomain?
  programs                Program[]

  @@index([projectId])
  @@index([lastChecked])
}

model RegisteredDomain {
  id        String   @id @default(cuid())
  slug      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
  projectId String
  domainId  String?  @unique
  project   Project  @relation(fields: [projectId], references: [id])
  domain    Domain?  @relation(fields: [domainId], references: [id], onDelete: SetNull)

  @@index([projectId])
  @@index([expiresAt])
}

model Webhook {
  id                   String                @id @default(cuid())
  projectId            String
  installationId       String?               @unique
  receiver             WebhookReceiver       @default(user)
  name                 String
  url                  String                @db.LongText
  secret               String
  triggers             Json
  consecutiveFailures  Int                   @default(0)
  lastFailedAt         DateTime?
  disabledAt           DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  project              Project               @relation(fields: [projectId], references: [id], onDelete: Cascade)
  installedIntegration InstalledIntegration? @relation(fields: [installationId], references: [id], onDelete: Cascade)
  links                LinkWebhook[]

  @@index([projectId])
}

model LinkWebhook {
  id        String  @id @default(cuid())
  linkId    String
  webhookId String
  link      Link    @relation(fields: [linkId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  webhook   Webhook @relation(fields: [webhookId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([linkId, webhookId])
  @@index([webhookId])
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  isMachine             Boolean                @default(false)
  passwordHash          String?
  invalidLoginAttempts  Int                    @default(0)
  lockedAt              DateTime?
  createdAt             DateTime               @default(now())
  subscribed            Boolean                @default(true)
  source                String?
  defaultWorkspace      String?
  defaultPartnerId      String?
  accounts              Account[]
  sessions              Session[]
  projects              ProjectUsers[]
  partners              PartnerUser[]
  links                 Link[]
  dashboards            Dashboard[]
  tokens                Token[]
  restrictedTokens      RestrictedToken[]
  oAuthCodes            OAuthCode[]
  integrations          Integration[]
  installedIntegrations InstalledIntegration[]
  folders               FolderUser[]
  folderAccessRequests  FolderAccessRequest[]
  utmTemplates          UtmTemplate[]
  payouts               Payout[]

  @@index([source])
  @@index([defaultWorkspace])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model DefaultDomains {
  id        String  @id @default(cuid())
  projectId String  @unique
  reflist   Boolean @default(true)
  dublink   Boolean @default(false)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

enum Role {
  owner
  member
}

enum WebhookReceiver {
  user
  zapier
  make
  slack
  segment
}
